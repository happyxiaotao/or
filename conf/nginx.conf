
user root; 
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
	# 避免一些no resolver defined to resolve "xxx" 类似的错误
	resolver 8.8.8.8;
	# 避免由于证书问题导致的 20: unable to get local issuer certificate 类似错误，一般不会出现
	lua_ssl_trusted_certificate /etc/ssl/certs/ca-certificates.crt; #使用curl -v -s -k "https://xxx" 可以查看能够正确请求的证书位置

	# 发送相应数据时是否在响应头字段"Content-Type"里面使用默认的MIME类型，通常设置为on
	lua_use_default_type on;
	# 设置清理内存的周期，每1000次请求执行一次内存清理。设置为0将禁用此功能
	lua_malloc_trim	1000;
	# 是否要求OpenResty在开始处理流程前强制读取请求体数据，默认是off。可以通过ngx.req.read_body按需去读
	lua_need_request_body off;
	# 启用或者禁用HTTP 1.0里面的缓存机制，默认是on。由于http1.1较为普及，可以设置为off
	lua_http10_buffering off;
	

    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    gzip  on;

	# 添加lua脚本路径
	lua_package_path "${prefix}/server/?.lua;;";
	# 添加so动态库路径
	lua_package_cpath "${prefix}/server/?.so;;";
	
	# 执行初始化操作
	init_by_lua_block {
		require("resty.core")
		collectgarbage("collect")	-- 好习惯，回收任何垃圾
	}
    server {
        listen       80;
        server_name  *.*;

        charset utf-8;

        #access_log  logs/host.access.log  main;

		# 设置成off，避免每次修改脚本之后需要重启reload，生产或压测环境下设置成on
		lua_code_cache off;

		# 以本文件nginx.conf路径为参考
		include ../server/server.lua;

        location / {
            root   html;
            index  index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }
}
